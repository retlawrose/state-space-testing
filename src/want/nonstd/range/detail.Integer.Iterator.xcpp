// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/state-space-testing/blob/master/LICENSE for terms.
#divert <fpp>
#include <hpp/want.nonstd.range.detail.Integer>
#endiv
#divert <hpp>
#import nonstd.required.Integer
namespace want::nonstd::range::detail {
  //
  // The iterator object on the integer range
  //
  // Specification:
  //   conforms to boost::irange<INTEGER>(first, last)
  //   but does not have the stride
  //
  // Usage:
  //
  //   see range::integer(first, last);
  //   see range::detail::Integer<...>
  //
  template<required::Integer INTEGER> struct Integer<INTEGER>::Iterator {
    using Value = INTEGER;
    inline Iterator() : position{Value(0)} { }
    inline explicit Iterator(Value position) : position{position} { }
    inline auto operator*() const -> Value { return position; }
    inline auto operator++() -> Iterator & { ++position; return *this; }
    inline auto operator++(int) -> Iterator { Iterator old{*this}; operator++(); return old; }
    inline auto operator==(Iterator const &other) const -> bool { return this->position == other.position; }
    inline auto operator!=(Iterator const &other) const -> bool { return this->position != other.position; }
  protected:
    Value position;
  };
}
#endiv
