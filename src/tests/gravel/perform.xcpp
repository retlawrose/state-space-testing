// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See LICENSE file in https://github.com/yahoo/state-space-testing/blob/master/LICENSE for terms.
#divert <hpp>
#import tests.gravel.Configuration
#import tests.gravel.Operation
namespace tests::gravel {
  //
  // Perform the test, with the indicated parameters.
  // Returning signals OK.
  // Throwing (at least Quitting) signals failure.
  //
  // Usage:
  //
  //   Operation::Context ctx;
  //   ctx.endpoints = {{"peer1.org1.example",9999u},{"peer12.org2.example",9999u}};
  //   ctx.channelID = "microphone";
  //   ctx.name = "mycc";
  //
  //   perform(ctx, Size{...}, Count{...});
  //
  auto perform(Configuration const &, Operation::Context &, Size, Count) -> void;
}
#endiv
#divert <cpp>
#import nonstd.exception.Quitting
#import std.cerr
#import sys.exits.constants
#import tests.gravel.Generator
#import tests.gravel.Operation
#import tests.gravel.range.count
#import want.nonstd.range.integer
auto tests::gravel::perform(Configuration const &cfg, Operation::Context &ctx, Size size, Count count) -> void {
  Operation op{ctx};
  Generator generate{size};
  for (auto position : range::count(Count{}, count)) {
    auto generated = generate();
    namespace pc = iab::privacychain; // [[FIXTHIS]] this could be made more elegant
    auto key = pc::Key{fingerprint(std::move(generated))};
    auto record = pc::Record{pc::record::tcf::Version1{consent(std::move(generated))}};
    auto sat = set(op, key, record);
    if (!ok(sat)) {
      // [[FIXTHIS]] maybe we should tolerate one or two failures in the series?   Or not?
      error(cfg) << "failed to write record " << 1+position
                << " at key " << format(key) << " because " << error_code(sat).message()
                << " (quitting)\n";
      throw nonstd::exception::Quitting{cfg.NAME, sys::exits::FAIL};
    }
  }
}
#endiv
